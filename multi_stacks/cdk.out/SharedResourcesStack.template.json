{
 "Description": "Home energy coach application from Hands-on AWS CDK Book",
 "Resources": {
  "RawDataUploadBucketC283C0F1": {
   "Type": "AWS::S3::Bucket",
   "Properties": {
    "BucketName": "home-energy-coach-raw-data-upload",
    "LifecycleConfiguration": {
     "Rules": [
      {
       "ExpirationInDays": 1,
       "Status": "Enabled"
      }
     ]
    },
    "Tags": [
     {
      "Key": "aws-cdk:auto-delete-objects",
      "Value": "true"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/RawDataUploadBucket/Resource"
   }
  },
  "RawDataUploadBucketPolicy2E785E7A": {
   "Type": "AWS::S3::BucketPolicy",
   "Properties": {
    "Bucket": {
     "Ref": "RawDataUploadBucketC283C0F1"
    },
    "PolicyDocument": {
     "Statement": [
      {
       "Action": [
        "s3:DeleteObject*",
        "s3:GetBucket*",
        "s3:List*",
        "s3:PutBucketPolicy"
       ],
       "Effect": "Allow",
       "Principal": {
        "AWS": {
         "Fn::GetAtt": [
          "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
          "Arn"
         ]
        }
       },
       "Resource": [
        {
         "Fn::GetAtt": [
          "RawDataUploadBucketC283C0F1",
          "Arn"
         ]
        },
        {
         "Fn::Join": [
          "",
          [
           {
            "Fn::GetAtt": [
             "RawDataUploadBucketC283C0F1",
             "Arn"
            ]
           },
           "/*"
          ]
         ]
        }
       ]
      }
     ],
     "Version": "2012-10-17"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/RawDataUploadBucket/Policy/Resource"
   }
  },
  "RawDataUploadBucketAutoDeleteObjectsCustomResourceED2344AC": {
   "Type": "Custom::S3AutoDeleteObjects",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "RawDataUploadBucketC283C0F1"
    }
   },
   "DependsOn": [
    "RawDataUploadBucketPolicy2E785E7A"
   ],
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/RawDataUploadBucket/AutoDeleteObjectsCustomResource/Default"
   }
  },
  "RawDataUploadBucketNotifications036686A5": {
   "Type": "Custom::S3BucketNotifications",
   "Properties": {
    "ServiceToken": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691",
      "Arn"
     ]
    },
    "BucketName": {
     "Ref": "RawDataUploadBucketC283C0F1"
    },
    "NotificationConfiguration": {
     "TopicConfigurations": [
      {
       "Events": [
        "s3:ObjectCreated:*"
       ],
       "Filter": {
        "Key": {
         "FilterRules": [
          {
           "Name": "suffix",
           "Value": ".csv"
          }
         ]
        }
       },
       "TopicArn": {
        "Ref": "SnsTopicRawUploadD6872FAD"
       }
      }
     ]
    },
    "Managed": true,
    "SkipDestinationValidation": false
   },
   "DependsOn": [
    "RawDataUploadBucketPolicy2E785E7A",
    "SnsTopicRawUploadedi7709gmailcom3E4668F2",
    "SnsTopicRawUploadPolicyC37C2C57",
    "SnsTopicRawUploadD6872FAD"
   ],
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/RawDataUploadBucket/Notifications/Resource"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Version": "2012-10-17",
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ]
    },
    "ManagedPolicyArns": [
     {
      "Fn::Sub": "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Role"
   }
  },
  "CustomS3AutoDeleteObjectsCustomResourceProviderHandler9D90184F": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Code": {
     "S3Bucket": "cdk-hnb659fds-assets-543982656680-eu-central-1",
     "S3Key": "faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6.zip"
    },
    "Timeout": 900,
    "MemorySize": 128,
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092",
      "Arn"
     ]
    },
    "Runtime": "nodejs20.x",
    "Description": {
     "Fn::Join": [
      "",
      [
       "Lambda function for auto-deleting objects in ",
       {
        "Ref": "RawDataUploadBucketC283C0F1"
       },
       " S3 bucket."
      ]
     ]
    }
   },
   "DependsOn": [
    "CustomS3AutoDeleteObjectsCustomResourceProviderRole3B1BD092"
   ],
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/Custom::S3AutoDeleteObjectsCustomResourceProvider/Handler",
    "aws:asset:path": "asset.faa95a81ae7d7373f3e1f242268f904eb748d8d0fdd306e8a6fe515a1905a7d6",
    "aws:asset:property": "Code"
   }
  },
  "SnsTopicRawUploadD6872FAD": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "DisplayName": "Home Energy Coach SNS Topic",
    "TopicName": "home-energy-coach-raw-upload"
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/SnsTopicRawUpload/Resource"
   }
  },
  "SnsTopicRawUploadedi7709gmailcom3E4668F2": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": "edi7709@gmail.com",
    "Protocol": "email",
    "TopicArn": {
     "Ref": "SnsTopicRawUploadD6872FAD"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/SnsTopicRawUpload/edi7709@gmail.com/Resource"
   }
  },
  "SnsTopicRawUploadPolicyC37C2C57": {
   "Type": "AWS::SNS::TopicPolicy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "sns:Publish",
       "Condition": {
        "ArnLike": {
         "aws:SourceArn": {
          "Fn::GetAtt": [
           "RawDataUploadBucketC283C0F1",
           "Arn"
          ]
         }
        }
       },
       "Effect": "Allow",
       "Principal": {
        "Service": "s3.amazonaws.com"
       },
       "Resource": {
        "Ref": "SnsTopicRawUploadD6872FAD"
       },
       "Sid": "0"
      }
     ],
     "Version": "2012-10-17"
    },
    "Topics": [
     {
      "Ref": "SnsTopicRawUploadD6872FAD"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/SnsTopicRawUpload/Policy/Resource"
   }
  },
  "SnsTopicCalculatorSummaryDA8CC890": {
   "Type": "AWS::SNS::Topic",
   "Properties": {
    "DisplayName": "Home Energy Coach SNS Topic for calculator summary",
    "TopicName": "home-energy-coach-calculator-summary"
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/SnsTopicCalculatorSummary/Resource"
   }
  },
  "SnsTopicCalculatorSummaryedi7709gmailcom67027549": {
   "Type": "AWS::SNS::Subscription",
   "Properties": {
    "Endpoint": "edi7709@gmail.com",
    "Protocol": "email",
    "TopicArn": {
     "Ref": "SnsTopicCalculatorSummaryDA8CC890"
    }
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/SnsTopicCalculatorSummary/edi7709@gmail.com/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC": {
   "Type": "AWS::IAM::Role",
   "Properties": {
    "AssumeRolePolicyDocument": {
     "Statement": [
      {
       "Action": "sts:AssumeRole",
       "Effect": "Allow",
       "Principal": {
        "Service": "lambda.amazonaws.com"
       }
      }
     ],
     "Version": "2012-10-17"
    },
    "ManagedPolicyArns": [
     {
      "Fn::Join": [
       "",
       [
        "arn:",
        {
         "Ref": "AWS::Partition"
        },
        ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
       ]
      ]
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36": {
   "Type": "AWS::IAM::Policy",
   "Properties": {
    "PolicyDocument": {
     "Statement": [
      {
       "Action": "s3:PutBucketNotification",
       "Effect": "Allow",
       "Resource": "*"
      }
     ],
     "Version": "2012-10-17"
    },
    "PolicyName": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "Roles": [
     {
      "Ref": "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
     }
    ]
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource"
   }
  },
  "BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691": {
   "Type": "AWS::Lambda::Function",
   "Properties": {
    "Description": "AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)",
    "Code": {
     "ZipFile": "import boto3  # type: ignore\nimport json\nimport logging\nimport urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\", \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event: dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed', 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation', 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old = event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\", {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"BucketName\"], stack_id, event[\"RequestType\"], notification_configuration, old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n  except Exception as e:\n    logging.exception(\"Failed to put bucket notification configuration\")\n    response_status = \"FAILED\"\n    error_message = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context, response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration, old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications = sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n        old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]      \n    elif request_type == 'Delete':\n        external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"{stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t] = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION] = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type == 'Delete':\n    return external_notifications\n\n  notifications = {}\n  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t, [])\n    incoming = [with_id(n) for n in notification_configuration.get(t, [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION] = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION] = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\ndef submit_response(event: dict, context, response_status: str, error_message: str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\": event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n      \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\": False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n    with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception as e:\n      print(\"send(..) failed executing request.urlopen(..): \" + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj, dict):\n      return json_obj\n  for key, value in json_obj.items():\n      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item) for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
    },
    "Handler": "index.handler",
    "Role": {
     "Fn::GetAtt": [
      "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC",
      "Arn"
     ]
    },
    "Runtime": "python3.11",
    "Timeout": 300
   },
   "DependsOn": [
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36",
    "BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC"
   ],
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource"
   }
  },
  "CalculatedEnergyTable9A20EF08": {
   "Type": "AWS::DynamoDB::Table",
   "Properties": {
    "AttributeDefinitions": [
     {
      "AttributeName": "id",
      "AttributeType": "S"
     },
     {
      "AttributeName": "date",
      "AttributeType": "S"
     }
    ],
    "BillingMode": "PAY_PER_REQUEST",
    "KeySchema": [
     {
      "AttributeName": "id",
      "KeyType": "HASH"
     },
     {
      "AttributeName": "date",
      "KeyType": "RANGE"
     }
    ]
   },
   "UpdateReplacePolicy": "Delete",
   "DeletionPolicy": "Delete",
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/CalculatedEnergyTable/Resource"
   }
  },
  "CDKMetadata": {
   "Type": "AWS::CDK::Metadata",
   "Properties": {
    "Analytics": "v2:deflate64:H4sIAAAAAAAA/8VUTW/bMAz9LdUxULx1QYGht6TLYVizuU6GYSiCQJaYRI0sGfroYBj576NkJzFaIDvuJIt8JB+fSH/Kbj/fZR9v2B835uIwVrLM2qVn/EDRtGndJGtngR/AP7eEBW++gAIPP8oX4N6Re28DUFImxHdWAbknI0KJklvgDVdQBAUIe26Pa0osVOaVqdwoyRtECnDemoYcKeYW4nEYlGJoSjYia4x+2OqOCO2OLguy6oqnwkNY5z9Sp13WrkwtOWKFdLVizYCpj57zPTL5JyYVSRnpMpSOW1l7aTSmT8A+CLSojdS+v9bWeMONwitUTCo0baXyYM9qjN6Yfkm/X4BzbAczI04IAUw8gkfUU4BwYf2/SicxhjLQpMz5dRKvOAGXZxwAjlSyKmsLoyDOl3OhAjHDgi2ylprLmqkp5yacm+kwMWDKY7mORT9BC6aRsjj1hSmroWVqe/i6x69Mfqpyiem9Hpdg/1UrqeHsSz1cdaYGIzvaKxBJnwJWJnre5XlvFgJX0EMF2vfL0yU+iSYazSojcFVXrEzS1cx6GfX4Bkk9PZjepo6fSxwT4oz11xGlVNjVbmFENOXT35t8XmyK+dPP+XJFruxw97SRDr7GQ3DeVAU4EyyH1FgSpje88efWvEoBdsYc0Klz4LH9HbKgwwzdj4Dmjd8b/WGS3U6yu5sXJ+XY4njICrKiO/8Ct9GYuNQEAAA="
   },
   "Metadata": {
    "aws:cdk:path": "SharedResourcesStack/CDKMetadata/Default"
   }
  }
 },
 "Outputs": {
  "ExportsOutputFnGetAttRawDataUploadBucketC283C0F1Arn622F0326": {
   "Value": {
    "Fn::GetAtt": [
     "RawDataUploadBucketC283C0F1",
     "Arn"
    ]
   },
   "Export": {
    "Name": "SharedResourcesStack:ExportsOutputFnGetAttRawDataUploadBucketC283C0F1Arn622F0326"
   }
  },
  "ExportsOutputRefSnsTopicCalculatorSummaryDA8CC890D20B061A": {
   "Value": {
    "Ref": "SnsTopicCalculatorSummaryDA8CC890"
   },
   "Export": {
    "Name": "SharedResourcesStack:ExportsOutputRefSnsTopicCalculatorSummaryDA8CC890D20B061A"
   }
  },
  "ExportsOutputRefCalculatedEnergyTable9A20EF08083288C4": {
   "Value": {
    "Ref": "CalculatedEnergyTable9A20EF08"
   },
   "Export": {
    "Name": "SharedResourcesStack:ExportsOutputRefCalculatedEnergyTable9A20EF08083288C4"
   }
  },
  "ExportsOutputRefRawDataUploadBucketC283C0F134B41C6D": {
   "Value": {
    "Ref": "RawDataUploadBucketC283C0F1"
   },
   "Export": {
    "Name": "SharedResourcesStack:ExportsOutputRefRawDataUploadBucketC283C0F134B41C6D"
   }
  }
 },
 "Parameters": {
  "BootstrapVersion": {
   "Type": "AWS::SSM::Parameter::Value<String>",
   "Default": "/cdk-bootstrap/hnb659fds/version",
   "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]"
  }
 },
 "Rules": {
  "CheckBootstrapVersion": {
   "Assertions": [
    {
     "Assert": {
      "Fn::Not": [
       {
        "Fn::Contains": [
         [
          "1",
          "2",
          "3",
          "4",
          "5"
         ],
         {
          "Ref": "BootstrapVersion"
         }
        ]
       }
      ]
     },
     "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI."
    }
   ]
  }
 }
}